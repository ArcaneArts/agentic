import 'package:agentic/agentic.dart';
import 'package:artifact/artifact.dart';
import 'package:decimal/decimal.dart';
import 'package:fast_log/fast_log.dart';
import 'package:http/http.dart' as http;
import 'package:threshold/threshold.dart';
import 'package:toxic/extensions/future.dart';
import 'package:toxic/extensions/iterable.dart';

@artifact
class NagaModelsListResponse {
  final List<NagaModel> data;

  const NagaModelsListResponse({this.data = const []});
}

@artifact
class NagaModel {
  final String id;
  final int context_length;
  final NagaArchitecture architecture;
  final NagaPricing pricing;
  final List<String> supported_parameters;

  const NagaModel({
    required this.id,
    this.context_length = 200000,
    required this.architecture,
    this.supported_parameters = const [],
    this.pricing = const NagaPricing(),
  });

  ChatModel get toChatModel => ChatModel(
    id: id,
    cost: ChatModelCost(
      input:
          (Decimal.parse(pricing.prompt) * Decimal.fromInt(1_000_000))
              .toDouble() *
          1.06,
      output:
          (Decimal.parse(pricing.completion) * Decimal.fromInt(1_000_000))
              .toDouble() *
          1.06,
    ),
    capabilities: ChatModelCapabilities(
      tools:
          supported_parameters.contains("tools") &&
          supported_parameters.contains("tool_choice"),
      ultraCompatibleMode: false,
      systemMode: ChatModelSystemMode.supported,
      contextWindow: context_length,
      maxTokenOutput: 16384,
      inputModalities:
          architecture.input_modalities
              .map(
                (i) => Modality.values.select(
                  (v) => v.name.toLowerCase() == i.toLowerCase(),
                ),
              )
              .whereType<Modality>()
              .toList(),
      outputModalities:
          architecture.output_modalities
              .map(
                (i) => Modality.values.select(
                  (v) => v.name.toLowerCase() == i.toLowerCase(),
                ),
              )
              .whereType<Modality>()
              .toList(),
      reasoning: supported_parameters.contains("reasoning"),
      structuredOutput: supported_parameters.contains("response_format"),
      streaming: true,
      seesToolMessages:
          supported_parameters.contains("tools") &&
          supported_parameters.contains("tool_choice"),
    ),
  );
}

@artifact
class NagaArchitecture {
  final List<String> input_modalities;
  final List<String> output_modalities;
  final String tokenizer;

  const NagaArchitecture({
    this.input_modalities = const [],
    this.output_modalities = const [],
    required this.tokenizer,
  });
}

@artifact
class NagaPricing {
  final String prompt;
  final String completion;
  final String request;
  final String image;
  final String audio;
  final String web_search;
  final String internal_reasoning;

  const NagaPricing({
    this.prompt = "0",
    this.completion = "0",
    this.request = "0",
    this.image = "0",
    this.web_search = "0",
    this.audio = "0",
    this.internal_reasoning = "0",
  });
}

//////////////////////////////////////////////////////////////////////

void main() async {
  print("const String _nagaData = \"${await getLiveNagaData()}\";");
}

Future<String> getLiveNagaData() => http
    .get(Uri.parse("https://api.naga.ac/v1/models"))
    .thenRun((x) => print(x.body))
    .then(
      (v) => compress(
        $NagaModelsListResponse.fromJson(v.body).toJson(pretty: false),
        allowBZip2: false,
        allowZLib: false,
      ),
    )
    .catchError((e, es) {
      warn("Failed to get live OpenRouter data. Using internal fallback.");
      warn("$e, $es");
      return _nagaData;
    });

Future<List<ChatModel>> getLiveNagaModels() async =>
    $NagaModelsListResponse
        .fromJson(decompress(await getLiveNagaData()))
        .data
        .map((i) => i.toChatModel)
        .toList();

const String _nagaData =
    "*";

List<NagaModel> rawNagaModels =
    $NagaModelsListResponse.fromJson(decompress(_nagaData)).data;
List<ChatModel> nagaChatModels =
    rawNagaModels.map((i) => i.toChatModel).toList();
