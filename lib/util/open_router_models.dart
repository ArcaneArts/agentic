import 'package:agentic/agentic.dart';
import 'package:artifact/artifact.dart';
import 'package:decimal/decimal.dart';
import 'package:fast_log/fast_log.dart';
import 'package:http/http.dart' as http;
import 'package:threshold/threshold.dart';
import 'package:toxic/extensions/iterable.dart';

@artifact
class OpenRouterModelsListResponse {
  final List<OpenRouterModel> data;

  const OpenRouterModelsListResponse({this.data = const []});
}

@artifact
class OpenRouterModel {
  final String id;
  final String canonical_slug;
  final String name;
  final int created;
  final int context_length;
  final OpenRouterArchitecture architecture;
  final OpenRouterPricing pricing;
  final List<String> supported_parameters;

  const OpenRouterModel({
    required this.id,
    required this.canonical_slug,
    required this.name,
    required this.created,
    required this.context_length,
    required this.architecture,
    this.supported_parameters = const [],
    this.pricing = const OpenRouterPricing(),
  });

  ChatModel get toChatModel => ChatModel(
    id: id,
    cost: ChatModelCost(
      input:
          (Decimal.parse(pricing.prompt) * Decimal.fromInt(1_000_000))
              .toDouble() *
          1.06,
      output:
          (Decimal.parse(pricing.completion) * Decimal.fromInt(1_000_000))
              .toDouble() *
          1.06,
    ),
    capabilities: ChatModelCapabilities(
      tools:
          supported_parameters.contains("tools") &&
          supported_parameters.contains("tool_choice"),
      ultraCompatibleMode: false,
      systemMode: ChatModelSystemMode.supported,
      contextWindow: context_length,
      maxTokenOutput: 16384,
      inputModalities:
          architecture.input_modalities
              .map(
                (i) => Modality.values.select(
                  (v) => v.name.toLowerCase() == i.toLowerCase(),
                ),
              )
              .whereType<Modality>()
              .toList(),
      outputModalities:
          architecture.output_modalities
              .map(
                (i) => Modality.values.select(
                  (v) => v.name.toLowerCase() == i.toLowerCase(),
                ),
              )
              .whereType<Modality>()
              .toList(),
      reasoning: supported_parameters.contains("reasoning"),
      structuredOutput: supported_parameters.contains("response_format"),
      streaming: true,
      seesToolMessages:
          supported_parameters.contains("tools") &&
          supported_parameters.contains("tool_choice"),
    ),
  );
}

@artifact
class OpenRouterArchitecture {
  final String modality;
  final List<String> input_modalities;
  final List<String> output_modalities;
  final String tokenizer;

  const OpenRouterArchitecture({
    required this.modality,
    this.input_modalities = const [],
    this.output_modalities = const [],
    required this.tokenizer,
  });
}

@artifact
class OpenRouterPricing {
  final String prompt;
  final String completion;
  final String request;
  final String image;
  final String audio;
  final String web_search;
  final String internal_reasoning;

  const OpenRouterPricing({
    this.prompt = "0",
    this.completion = "0",
    this.request = "0",
    this.image = "0",
    this.web_search = "0",
    this.audio = "0",
    this.internal_reasoning = "0",
  });
}

//////////////////////////////////////////////////////////////////////

void main() async {
  print("const String _openRouterData = \"${await getLiveOpenRouterData()}\";");
}

Future<String> getLiveOpenRouterData() => http
    .get(Uri.parse("https://openrouter.ai/api/v1/models"))
    .then(
      (v) => compress(
        $OpenRouterModelsListResponse.fromJson(v.body).toJson(pretty: false),
        allowBZip2: false,
        allowZLib: false,
      ),
    )
    .catchError((e, es) {
      warn("Failed to get live OpenRouter data. Using internal fallback.");
      warn("$e, $es");
      return _openRouterData;
    });

Future<List<ChatModel>> getLiveOpenRouterModels() async =>
    $OpenRouterModelsListResponse
        .fromJson(decompress(await getLiveOpenRouterData()))
        .data
        .map((i) => i.toChatModel)
        .toList();

const String _openRouterData =
    "*";
List<OpenRouterModel> rawOpenRouterModels =
    $OpenRouterModelsListResponse.fromJson(decompress(_openRouterData)).data;
List<ChatModel> openRouterChatModels =
    rawOpenRouterModels.map((i) => i.toChatModel).toList();
