import 'package:agentic/agentic.dart';
import 'package:artifact/artifact.dart';
import 'package:decimal/decimal.dart';
import 'package:http/http.dart' as http;
import 'package:threshold/threshold.dart';
import 'package:toxic/extensions/iterable.dart';

@artifact
class OpenRouterModelsListResponse {
  final List<OpenRouterModel> data;

  const OpenRouterModelsListResponse({this.data = const []});
}

@artifact
class OpenRouterModel {
  final String id;
  final String canonical_slug;
  final String name;
  final int created;
  final int context_length;
  final OpenRouterArchitecture architecture;
  final OpenRouterPricing pricing;
  final List<String> supported_parameters;

  const OpenRouterModel({
    required this.id,
    required this.canonical_slug,
    required this.name,
    required this.created,
    required this.context_length,
    required this.architecture,
    this.supported_parameters = const [],
    this.pricing = const OpenRouterPricing(),
  });

  ChatModel get toChatModel => ChatModel(
    id: id,
    cost: ChatModelCost(
      input:
          (Decimal.parse(pricing.prompt) * Decimal.fromInt(1_000_000))
              .toDouble(),
      output:
          (Decimal.parse(pricing.completion) * Decimal.fromInt(1_000_000))
              .toDouble(),
    ),
    capabilities: ChatModelCapabilities(
      tools:
          supported_parameters.contains("tools") &&
          supported_parameters.contains("tool_choice"),
      ultraCompatibleMode: false,
      systemMode: ChatModelSystemMode.supported,
      contextWindow: context_length,
      maxTokenOutput: 16384,
      inputModalities:
          architecture.input_modalities
              .map(
                (i) => Modality.values.select(
                  (v) => v.name.toLowerCase() == i.toLowerCase(),
                ),
              )
              .whereType<Modality>()
              .toList(),
      outputModalities:
          architecture.output_modalities
              .map(
                (i) => Modality.values.select(
                  (v) => v.name.toLowerCase() == i.toLowerCase(),
                ),
              )
              .whereType<Modality>()
              .toList(),
      reasoning: supported_parameters.contains("reasoning"),
      structuredOutput: supported_parameters.contains("response_format"),
      streaming: true,
      seesToolMessages:
          supported_parameters.contains("tools") &&
          supported_parameters.contains("tool_choice"),
    ),
  );
}

@artifact
class OpenRouterArchitecture {
  final String modality;
  final List<String> input_modalities;
  final List<String> output_modalities;
  final String tokenizer;

  const OpenRouterArchitecture({
    required this.modality,
    this.input_modalities = const [],
    this.output_modalities = const [],
    required this.tokenizer,
  });
}

@artifact
class OpenRouterPricing {
  final String prompt;
  final String completion;
  final String request;
  final String image;
  final String audio;
  final String web_search;
  final String internal_reasoning;

  const OpenRouterPricing({
    this.prompt = "0",
    this.completion = "0",
    this.request = "0",
    this.image = "0",
    this.web_search = "0",
    this.audio = "0",
    this.internal_reasoning = "0",
  });
}

//////////////////////////////////////////////////////////////////////

void main() async {
  //print(await _getCompressedData());
}

Future<String> _getCompressedData() =>
    http.get(Uri.parse("https://openrouter.ai/api/v1/models")).then((v) {
      int l = v.body.length;
      String o = compress(
        $OpenRouterModelsListResponse.fromJson(v.body).toJson(pretty: false),
        allowBZip2: false,
        allowZLib: false,
      );
      print("$l -> ${o.length}");
      return o;
    });

const String _openRouterData =
    "*";
List<OpenRouterModel> rawOpenRouterModels =
    $OpenRouterModelsListResponse.fromJson(decompress(_openRouterData)).data;
List<ChatModel> openRouterChatModels =
    rawOpenRouterModels.map((i) => i.toChatModel).toList();
